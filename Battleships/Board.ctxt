#BlueJ class context
comment0.target=Board
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Board\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=Board()
comment10.params=key\ target
comment10.target=boolean\ hitX(ShipInterface,\ Position)
comment10.text=\r\n\ Checks\ if\ the\ ship\ is\ horizontal,\r\n\ if\ the\ target\ is\ between\ the\ start\ of\ the\ ship\ and\ the\ end\ of\ the\ ship\ in\ the\ x\ axis\r\n\ and\ if\ the\ y\ co-ordinates\ of\ the\ target\ and\ the\ start\ of\ the\ ship\ were\ the\ same\r\n\ \r\n\ @param\ the\ start\ position\ of\ a\ ship\ which\ is\ also\ the\ key\ of\ the\ hash\ map\r\n\ \r\n\ @param\ the\ target\ position\r\n
comment11.params=
comment11.target=int\ numShipsPlaced()
comment12.params=
comment12.target=java.lang.String\ saveString()
comment13.params=input
comment13.target=Board\ loadBoard(java.lang.String)
comment2.params=ship\ position\ isVertical
comment2.target=void\ placeShip(ShipInterface,\ Position,\ boolean)
comment2.text=\r\n\ Add\ a\ ship\ to\ the\ board\ with\ the\ top/left\ position\ specified\r\n\ \r\n\ @param\ ship\ The\ ship\ to\ add\ to\ the\ board\r\n\ \r\n\ @param\ position\ The\ top/left\ of\ the\ ship\ position\r\n\ \r\n\ @param\ isVertical\ True\ if\ ship\ is\ to\ be\ placed\ vertically,\ otherwise\ the\ ship\ should\r\n\ be\ placed\ horizontally\r\n\ \r\n\ @throws\ InvalidPositionException\ if\ the\ not\ all\ of\ the\ ship\ squares\ fit\ onto\ the\ board\r\n\ \r\n\ @throws\ ShipOverlapException\ if\ the\ any\ of\ the\ squares\ of\ the\ ship\ to\ be\ added\ would\ overlap\r\n\ with\ an\ already\ placed\ ship\r\n\ \r\n
comment3.params=position
comment3.target=void\ shoot(Position)
comment3.text=\r\n\ Update\ the\ board\ state\ by\ shooting\ at\ the\ given\ position\r\n\ \r\n\ @throws\ InvalidPositionException\ if\ the\ shot\ position\ is\ not\ on\ the\ board\r\n
comment4.params=position
comment4.target=ShipStatus\ getStatus(Position)
comment4.text=\r\n\ Find\ the\ status\ at\ the\ given\ position\r\n\ \r\n\ @param\ position\ the\ position\ to\ find\ out\ about\r\n\ \r\n\ @return\ The\ status\ at\ the\ given\ board\ position\r\n\ \r\n\ @throws\ InvalidPositionException\ if\ the\ position\ is\ not\ on\ the\ board\r\n
comment5.params=
comment5.target=boolean\ allSunk()
comment5.text=\r\n\ Find\ if\ all\ the\ ships\ on\ the\ board\ have\ been\ sunk\r\n\ \r\n\ @return\ True\ If\ and\ only\ if\ all\ the\ ships\ have\ been\ sunk\r\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\r\n\ \r\n\ A\ string\ representation\ of\ the\ board,\ suitable\ for\ printing\ to\ the\ screen\r\n\ \r\n
comment7.params=
comment7.target=void\ emptyBoard()
comment8.params=
comment8.target=BoardInterface\ clone()
comment8.text=\r\n\ Make\ a\ deep\ clone\ of\ the\ current\ object.\ Only\ clones\ of\ boards\ are\ to\ be\ passed\ to\ a\r\n\ player\ by\ a\ game,\ so\ that\ the\ player\ does\ not\ affect\ the\ game\ state\ if\ shots\ are\ tried\ out\r\n\r\n\ @return\ the\ cloned\ object\r\n
comment9.params=key\ target
comment9.target=boolean\ hitY(ShipInterface,\ Position)
comment9.text=\r\n\ Checks\ if\ the\ ship\ is\ verticle,\r\n\ if\ the\ target\ is\ between\ the\ start\ of\ the\ ship\ and\ the\ end\ of\ the\ ship\ in\ the\ y\ axis\r\n\ and\ if\ the\ x\ co-ordinates\ of\ the\ target\ and\ the\ start\ of\ the\ ship\ were\ the\ same\r\n\ \r\n\ @param\ the\ start\ position\ of\ a\ ship\ which\ is\ also\ the\ key\ of\ the\ hash\ map\r\n\ \r\n\ @param\ the\ target\ position\r\n
numComments=14
